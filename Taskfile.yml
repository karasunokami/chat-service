# https://taskfile.dev
version: '3'

silent: true

dotenv: ['.env']

vars:
  GO_MODULE: github.com/karasunokami/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.52.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/.libscache"

  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
    ./deploy/local/docker-compose.swagger-ui.yml

  DOCKER_COMPOSE_CMD: docker compose -f {{.DOCKER_COMPOSE_PATHS | trim | splitLines | join " -f "}}
  DOCKER_TOOLS_CMD_TPL: docker run --user $(id -u):$(id -g) --rm -v "$(pwd):/app" -w /app
  DOCKER_TOOLS_CMD: "{{.DOCKER_TOOLS_CMD_TPL}} chat-service-tools"

  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
    RequestID
    JobID
    FailedJobID

  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go
  TYPES_TEMPLATE: ./internal/types/types.tmpl

  ENT_SCHEMA: ./internal/store/schema
  ENT_DATABASE_TEMPLATE: ./internal/store/templates

  CLIENT_V1_SRC: ./api/client.v1.swagger.yml
  CLIENT_V1_DST: ./internal/server-client/v1/server.gen.go
  CLIENT_V1_PKG: clientv1

  ### E2E tests ###
  E2E_CLIENT_V1_DST: ./tests/e2e/api/client/v1/client.gen.go
  E2E_CLIENT_V1_PKG: apiclientv1
  ###

tasks:
  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - "{{.DOCKER_TOOLS_CMD}} gofumpt -l -w {{.GO_FILES}}"
    - "{{.DOCKER_TOOLS_CMD}} gci -l {{.GO_MODULE}} {{.GO_FILES}}"

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          chat-service-tools \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  tests:integration:
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  tests:e2e:
    cmds:
      - echo "- End-to-end tests..."
      # NOTE: It's important to run tests serial (without `-p` flag) â€“ for correct `clientsPool` sharing.
      - "{{.DOCKER_TOOLS_CMD_TPL}} --env-file .env --network host chat-service-tools ginkgo --fail-fast --timeout=1m --tags e2e {{.CLI_ARGS}} ./tests/e2e"

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  generate:
    aliases: [gen]
    cmds:
      - echo "- Run go generate..."
      - task: gen:utils
      - task: gen:types
      - task: ent:gen
      - task: gen:api
      - task: gen:e2e

  gen:utils:
    cmds:
      - echo "- Generate utils structs..."
      - docker run --rm -v "$(pwd):/app" -w /app chat-service-tools go generate ./...

  gen:types:
    cmds:
      - echo "- Generate types..."
      - |
         go run ./cmd/gen-types \
         {{.TYPES_PKG}} \
         {{.TYPES | trim | splitLines | join ","}} \
         {{.TYPES_DST}} \
         {{.TYPES_TEMPLATE}}

  gen:api:
    - "{{.DOCKER_TOOLS_CMD}} oapi-codegen -generate server,spec,types -package {{.CLIENT_V1_PKG}} {{.CLIENT_V1_SRC}} > {{.CLIENT_V1_DST}}"

  gen:e2e:
    cmds:
      - echo "[E2E] Generate client API..."
      - "{{.DOCKER_TOOLS_CMD}} oapi-codegen --old-config-style -generate types,client -package {{.E2E_CLIENT_V1_PKG}} {{.CLIENT_V1_SRC}} > {{.E2E_CLIENT_V1_DST}}"

  ent:gen:
    aliases: [ gen:ent ]
    cmds:
      - docker run --rm -v "$(pwd):/app" -w /app chat-service-tools ent generate --template {{.ENT_DATABASE_TEMPLATE}} {{.ENT_SCHEMA}} --feature sql/lock
      - task: tidy

  ent:new:
    cmds:
      - "{{.DOCKER_TOOLS_CMD}} ent new --target={{.ENT_SCHEMA}} {{.CLI_ARGS}}"
      - task: tidy

  kc:export:
    cmds:
      - echo "- Exporting data from keycloak..."
      - "{{.DOCKER_COMPOSE_CMD}} exec -it keycloak /opt/keycloak/bin/kc.sh export --file /tmp/bank-realm.json --realm Bank"
      - "{{.DOCKER_COMPOSE_CMD}} cp keycloak:/tmp/bank-realm.json ./deploy/local/bank-realm.json"
      - echo "- Exported in ./deploy/local/bank-realm.json"

  dev-tools:install:
    cmds:
      - echo "- Install dev tools"
      - |
        docker build . \
        -f tools.dockerfile \
        --build-arg GOLANGCI_LINT_VERSION={{.GOLANGCI_LINT_VERSION}} \
        -t chat-service-tools

  dev-tools:cmd:
    cmds:
      - "{{.DOCKER_TOOLS_CMD}} {{.CLI_ARGS}}"

  deps:
    cmds:
      - test -f .env || cp .env.example .env
      - "{{.DOCKER_COMPOSE_CMD}} up -d"

  deps:cmd:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs -f {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:sentry-init:
    cmds:
      - "COMPOSE_PROFILES=sentry {{.DOCKER_COMPOSE_CMD}} run -it sentry upgrade"

  deps:sentry-create-user:
    cmds:
      - "COMPOSE_PROFILES=sentry {{.DOCKER_COMPOSE_CMD}} run -it sentry createuser"

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"
