// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	messagesrepo "github.com/karasunokami/chat-service/internal/repositories/messages"
	types "github.com/karasunokami/chat-service/internal/types"
)

// MockproblemsRepo is a mock of problemsRepo interface.
type MockproblemsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepoMockRecorder
}

// MockproblemsRepoMockRecorder is the mock recorder for MockproblemsRepo.
type MockproblemsRepoMockRecorder struct {
	mock *MockproblemsRepo
}

// NewMockproblemsRepo creates a new mock instance.
func NewMockproblemsRepo(ctrl *gomock.Controller) *MockproblemsRepo {
	mock := &MockproblemsRepo{ctrl: ctrl}
	mock.recorder = &MockproblemsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepo) EXPECT() *MockproblemsRepoMockRecorder {
	return m.recorder
}

// GetAssignedProblemID mocks base method.
func (m *MockproblemsRepo) GetAssignedProblemID(ctx context.Context, managerID types.UserID, chatID types.ChatID) (types.ProblemID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedProblemID", ctx, managerID, chatID)
	ret0, _ := ret[0].(types.ProblemID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedProblemID indicates an expected call of GetAssignedProblemID.
func (mr *MockproblemsRepoMockRecorder) GetAssignedProblemID(ctx, managerID, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedProblemID", reflect.TypeOf((*MockproblemsRepo)(nil).GetAssignedProblemID), ctx, managerID, chatID)
}

// MarkProblemAsResolved mocks base method.
func (m *MockproblemsRepo) MarkProblemAsResolved(ctx context.Context, problemID types.ProblemID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProblemAsResolved", ctx, problemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProblemAsResolved indicates an expected call of MarkProblemAsResolved.
func (mr *MockproblemsRepoMockRecorder) MarkProblemAsResolved(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProblemAsResolved", reflect.TypeOf((*MockproblemsRepo)(nil).MarkProblemAsResolved), ctx, problemID)
}

// MockmessagesRepo is a mock of messagesRepo interface.
type MockmessagesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepoMockRecorder
}

// MockmessagesRepoMockRecorder is the mock recorder for MockmessagesRepo.
type MockmessagesRepoMockRecorder struct {
	mock *MockmessagesRepo
}

// NewMockmessagesRepo creates a new mock instance.
func NewMockmessagesRepo(ctrl *gomock.Controller) *MockmessagesRepo {
	mock := &MockmessagesRepo{ctrl: ctrl}
	mock.recorder = &MockmessagesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepo) EXPECT() *MockmessagesRepoMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockmessagesRepo) CreateService(ctx context.Context, problemID types.ProblemID, chatID types.ChatID, msgBody string) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, problemID, chatID, msgBody)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockmessagesRepoMockRecorder) CreateService(ctx, problemID, chatID, msgBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockmessagesRepo)(nil).CreateService), ctx, problemID, chatID, msgBody)
}

// MockoutboxService is a mock of outboxService interface.
type MockoutboxService struct {
	ctrl     *gomock.Controller
	recorder *MockoutboxServiceMockRecorder
}

// MockoutboxServiceMockRecorder is the mock recorder for MockoutboxService.
type MockoutboxServiceMockRecorder struct {
	mock *MockoutboxService
}

// NewMockoutboxService creates a new mock instance.
func NewMockoutboxService(ctrl *gomock.Controller) *MockoutboxService {
	mock := &MockoutboxService{ctrl: ctrl}
	mock.recorder = &MockoutboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutboxService) EXPECT() *MockoutboxServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockoutboxService) Put(ctx context.Context, name, payload string, availableAt time.Time) (types.JobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, name, payload, availableAt)
	ret0, _ := ret[0].(types.JobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockoutboxServiceMockRecorder) Put(ctx, name, payload, availableAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockoutboxService)(nil).Put), ctx, name, payload, availableAt)
}

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *Mocktransactor) RunInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MocktransactorMockRecorder) RunInTx(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*Mocktransactor)(nil).RunInTx), ctx, f)
}
