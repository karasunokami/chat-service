// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package getchatsmocks is a generated GoMock package.
package getchatsmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chatsrepo "github.com/karasunokami/chat-service/internal/repositories/chats"
	types "github.com/karasunokami/chat-service/internal/types"
)

// MockchatsRepo is a mock of chatsRepo interface.
type MockchatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockchatsRepoMockRecorder
}

// MockchatsRepoMockRecorder is the mock recorder for MockchatsRepo.
type MockchatsRepoMockRecorder struct {
	mock *MockchatsRepo
}

// NewMockchatsRepo creates a new mock instance.
func NewMockchatsRepo(ctrl *gomock.Controller) *MockchatsRepo {
	mock := &MockchatsRepo{ctrl: ctrl}
	mock.recorder = &MockchatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchatsRepo) EXPECT() *MockchatsRepoMockRecorder {
	return m.recorder
}

// GetManagerOpened mocks base method.
func (m *MockchatsRepo) GetManagerOpened(ctx context.Context, managerID types.UserID) ([]chatsrepo.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerOpened", ctx, managerID)
	ret0, _ := ret[0].([]chatsrepo.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerOpened indicates an expected call of GetManagerOpened.
func (mr *MockchatsRepoMockRecorder) GetManagerOpened(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerOpened", reflect.TypeOf((*MockchatsRepo)(nil).GetManagerOpened), ctx, managerID)
}
