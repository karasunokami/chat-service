// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package gethistorymocks is a generated GoMock package.
package gethistorymocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messagesrepo "github.com/karasunokami/chat-service/internal/repositories/messages"
	types "github.com/karasunokami/chat-service/internal/types"
)

// MockmessagesRepository is a mock of messagesRepository interface.
type MockmessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepositoryMockRecorder
}

// MockmessagesRepositoryMockRecorder is the mock recorder for MockmessagesRepository.
type MockmessagesRepositoryMockRecorder struct {
	mock *MockmessagesRepository
}

// NewMockmessagesRepository creates a new mock instance.
func NewMockmessagesRepository(ctrl *gomock.Controller) *MockmessagesRepository {
	mock := &MockmessagesRepository{ctrl: ctrl}
	mock.recorder = &MockmessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepository) EXPECT() *MockmessagesRepositoryMockRecorder {
	return m.recorder
}

// GetManagerChatMessages mocks base method.
func (m *MockmessagesRepository) GetManagerChatMessages(ctx context.Context, chatID types.ChatID, managerID types.UserID, pageSize int, cursor *messagesrepo.Cursor) ([]messagesrepo.Message, *messagesrepo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerChatMessages", ctx, chatID, managerID, pageSize, cursor)
	ret0, _ := ret[0].([]messagesrepo.Message)
	ret1, _ := ret[1].(*messagesrepo.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagerChatMessages indicates an expected call of GetManagerChatMessages.
func (mr *MockmessagesRepositoryMockRecorder) GetManagerChatMessages(ctx, chatID, managerID, pageSize, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerChatMessages", reflect.TypeOf((*MockmessagesRepository)(nil).GetManagerChatMessages), ctx, chatID, managerID, pageSize, cursor)
}
