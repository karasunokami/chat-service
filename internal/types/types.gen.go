package types

// Code generated by cmd/gen-types; DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
	"fmt"

	"github.com/google/uuid"
)

var ChatIDNil ChatID

type ChatID struct {
	ID uuid.NullUUID
}

func NewChatID() ChatID {
	u, err := uuid.NewUUID()
	if err != nil {
		panic(err)
	}

	return ChatID{
		ID: uuid.NullUUID{
			UUID:  u,
			Valid: true,
		},
	}
}

func (c *ChatID) MarshalText() (text []byte, err error) {
	return c.ID.MarshalText()
}

func (c *ChatID) UnmarshalText(text []byte) error {
	return c.ID.UnmarshalText(text)
}

func (c *ChatID) Matches(x interface{}) bool {
	if xStr, ok := x.(string); ok {
		return xStr == c.String()
	}

	return false
}

func (c *ChatID) String() string {
	return c.ID.UUID.String()
}

func (c ChatID) Value() (driver.Value, error) {
	return c.ID.UUID.Value()
}

func (c *ChatID) Scan(src any) error {
	return c.ID.Scan(src)
}

func (c ChatID) Validate() error {
	if !c.ID.Valid {
		return errors.New("")
	}

	return nil
}

func (c *ChatID) IsZero() bool {
	return c.String() == ChatIDNil.String()
}

var MessageIDNil MessageID

type MessageID struct {
	ID uuid.NullUUID
}

func NewMessageID() MessageID {
	u, err := uuid.NewUUID()
	if err != nil {
		panic(err)
	}

	return MessageID{
		ID: uuid.NullUUID{
			UUID:  u,
			Valid: true,
		},
	}
}

func (c *MessageID) MarshalText() (text []byte, err error) {
	return c.ID.MarshalText()
}

func (c *MessageID) UnmarshalText(text []byte) error {
	return c.ID.UnmarshalText(text)
}

func (c *MessageID) Matches(x interface{}) bool {
	if xStr, ok := x.(string); ok {
		return xStr == c.String()
	}

	return false
}

func (c *MessageID) String() string {
	return c.ID.UUID.String()
}

func (c MessageID) Value() (driver.Value, error) {
	return c.ID.UUID.Value()
}

func (c *MessageID) Scan(src any) error {
	return c.ID.Scan(src)
}

func (c MessageID) Validate() error {
	if !c.ID.Valid {
		return errors.New("")
	}

	return nil
}

func (c *MessageID) IsZero() bool {
	return c.String() == MessageIDNil.String()
}

var ProblemIDNil ProblemID

type ProblemID struct {
	ID uuid.NullUUID
}

func NewProblemID() ProblemID {
	u, err := uuid.NewUUID()
	if err != nil {
		panic(err)
	}

	return ProblemID{
		ID: uuid.NullUUID{
			UUID:  u,
			Valid: true,
		},
	}
}

func (c *ProblemID) MarshalText() (text []byte, err error) {
	return c.ID.MarshalText()
}

func (c *ProblemID) UnmarshalText(text []byte) error {
	return c.ID.UnmarshalText(text)
}

func (c *ProblemID) Matches(x interface{}) bool {
	if xStr, ok := x.(string); ok {
		return xStr == c.String()
	}

	return false
}

func (c *ProblemID) String() string {
	return c.ID.UUID.String()
}

func (c ProblemID) Value() (driver.Value, error) {
	return c.ID.UUID.Value()
}

func (c *ProblemID) Scan(src any) error {
	return c.ID.Scan(src)
}

func (c ProblemID) Validate() error {
	if !c.ID.Valid {
		return errors.New("")
	}

	return nil
}

func (c *ProblemID) IsZero() bool {
	return c.String() == ProblemIDNil.String()
}

var UserIDNil UserID

type UserID struct {
	ID uuid.NullUUID
}

func NewUserID() UserID {
	u, err := uuid.NewUUID()
	if err != nil {
		panic(err)
	}

	return UserID{
		ID: uuid.NullUUID{
			UUID:  u,
			Valid: true,
		},
	}
}

func (c *UserID) MarshalText() (text []byte, err error) {
	return c.ID.MarshalText()
}

func (c *UserID) UnmarshalText(text []byte) error {
	return c.ID.UnmarshalText(text)
}

func (c *UserID) Matches(x interface{}) bool {
	if xStr, ok := x.(string); ok {
		return xStr == c.String()
	}

	return false
}

func (c *UserID) String() string {
	return c.ID.UUID.String()
}

func (c UserID) Value() (driver.Value, error) {
	return c.ID.UUID.Value()
}

func (c *UserID) Scan(src any) error {
	return c.ID.Scan(src)
}

func (c UserID) Validate() error {
	if !c.ID.Valid {
		return errors.New("")
	}

	return nil
}

func (c *UserID) IsZero() bool {
	return c.String() == UserIDNil.String()
}

func Parse[T ChatID | MessageID | ProblemID | UserID](id string) (T, error) {
	u, err := uuid.Parse(id)
	if err != nil {
		return T{}, fmt.Errorf("uuid parse, err=%w", err)
	}

	return T{ID: uuid.NullUUID{
		UUID:  u,
		Valid: true,
	}}, nil
}

func MustParse[T ChatID | MessageID | ProblemID | UserID](id string) T {
	u, err := uuid.Parse(id)
	if err != nil {
		panic(err)
	}

	return T{ID: uuid.NullUUID{
		UUID:  u,
		Valid: true,
	}}
}
