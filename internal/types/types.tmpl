package {{.Package}}

// Code generated by cmd/gen-types; DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

{{ range $i, $type := .Types -}}
var {{ $type }}Nil = {{ $type }}(uuid.Nil)

type {{ $type }} uuid.UUID                             //
func New{{ $type }}() {{ $type }}                           { return {{ $type }}(uuid.New()) }
func (t {{ $type }}) String() string                   { return uuid.UUID(t).String() }
func (t {{ $type }}) Value() (driver.Value, error)     { return t.String(), nil }
func (t *{{ $type }}) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t {{ $type }}) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *{{ $type }}) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t {{ $type }}) IsZero() bool                     { return t == {{ $type }}Nil }
func (t {{ $type }}) Matches(x interface{}) bool {
	v, ok := x.({{ $type }})
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t {{ $type }}) Validate() error {
	if t.IsZero() {
		return errors.New("zero {{ $type }}")
	}
	return nil
}

{{ end -}}

type TypeSet = interface {
	{{StringsJoin .Types "|"}}
}

func Parse[T TypeSet](s string) (T, error) {
	v, err := uuid.Parse(s)
	return T(v), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}
