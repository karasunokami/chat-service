package {{.Package}}

// Code generated by cmd/gen-types; DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
	"fmt"

	"github.com/google/uuid"
)

{{ range $i, $type := .Types -}}

var {{$type}}Nil {{$type}}

type {{$type}} struct {
	NUUID uuid.NullUUID
}

func New{{$type}}() {{$type}} {
	u, err := uuid.NewUUID()
	if err != nil {
		panic(err)
	}

	return {{$type}}{
		NUUID: uuid.NullUUID{
			UUID: u,
			Valid: true,
		},
	}
}

func (c *{{$type}}) MarshalText() (text []byte, err error) {
	return c.NUUID.MarshalText()
}

func (c *{{$type}}) UnmarshalText(text []byte) error {
	return c.NUUID.UnmarshalText(text)
}

func (c *{{$type}}) Matches(x interface{}) bool {
	if xStr, ok := x.(string); ok {
		return xStr == c.String()
	}

	return false
}

func (c *{{$type}}) String() string {
	return c.NUUID.UUID.String()
}

func (c {{$type}}) Value() (driver.Value, error) {
	return c.NUUID.UUID.Value()
}

func (c *{{$type}}) Scan(src any) error {
	return c.NUUID.Scan(src)
}

func (c {{$type}}) Validate() error {
	if !c.NUUID.Valid {
		return errors.New("")
	}

	return nil
}

func (c *{{$type}}) IsZero() bool {
	return c.String() == {{$type}}Nil.String()
}

{{ end -}}

func Parse[T {{StringsJoin .Types "|"}}](id string) (T, error) {
	u, err := uuid.Parse(id)
	if err != nil {
		return T{}, fmt.Errorf("uuid parse, err=%w", err)
	}

	return T{NUUID: uuid.NullUUID{
		UUID:  u,
		Valid: true,
	}}, nil
}

func MustParse[T {{StringsJoin .Types "|"}}](id string) T {
	u, err := uuid.Parse(id)
	if err != nil {
		panic(err)
	}

	return T{NUUID: uuid.NullUUID{
		UUID:  u,
		Valid: true,
	}}
}
