// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package clientmessagesentjobmocks is a generated GoMock package.
package clientmessagesentjobmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messagesrepo "github.com/karasunokami/chat-service/internal/repositories/messages"
	eventstream "github.com/karasunokami/chat-service/internal/services/event-stream"
	types "github.com/karasunokami/chat-service/internal/types"
)

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
}

// MockmessageRepo is a mock of messageRepo interface.
type MockmessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepoMockRecorder
}

// MockmessageRepoMockRecorder is the mock recorder for MockmessageRepo.
type MockmessageRepoMockRecorder struct {
	mock *MockmessageRepo
}

// NewMockmessageRepo creates a new mock instance.
func NewMockmessageRepo(ctrl *gomock.Controller) *MockmessageRepo {
	mock := &MockmessageRepo{ctrl: ctrl}
	mock.recorder = &MockmessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepo) EXPECT() *MockmessageRepoMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessageRepo) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessageRepoMockRecorder) GetMessageByID(ctx, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessageRepo)(nil).GetMessageByID), ctx, msgID)
}

// MockproblemsRepo is a mock of problemsRepo interface.
type MockproblemsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepoMockRecorder
}

// MockproblemsRepoMockRecorder is the mock recorder for MockproblemsRepo.
type MockproblemsRepoMockRecorder struct {
	mock *MockproblemsRepo
}

// NewMockproblemsRepo creates a new mock instance.
func NewMockproblemsRepo(ctrl *gomock.Controller) *MockproblemsRepo {
	mock := &MockproblemsRepo{ctrl: ctrl}
	mock.recorder = &MockproblemsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepo) EXPECT() *MockproblemsRepoMockRecorder {
	return m.recorder
}

// GetManagerID mocks base method.
func (m *MockproblemsRepo) GetManagerID(ctx context.Context, problemID types.ProblemID) (types.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerID", ctx, problemID)
	ret0, _ := ret[0].(types.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerID indicates an expected call of GetManagerID.
func (mr *MockproblemsRepoMockRecorder) GetManagerID(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerID", reflect.TypeOf((*MockproblemsRepo)(nil).GetManagerID), ctx, problemID)
}
