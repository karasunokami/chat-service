// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package clientmessagesentjobmocks is a generated GoMock package.
package clientmessagesentjobmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messagesrepo "github.com/karasunokami/chat-service/internal/repositories/messages"
	eventstream "github.com/karasunokami/chat-service/internal/services/event-stream"
	msgproducer "github.com/karasunokami/chat-service/internal/services/msg-producer"
	types "github.com/karasunokami/chat-service/internal/types"
)

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
}

// MockmessageProducer is a mock of messageProducer interface.
type MockmessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockmessageProducerMockRecorder
}

// MockmessageProducerMockRecorder is the mock recorder for MockmessageProducer.
type MockmessageProducerMockRecorder struct {
	mock *MockmessageProducer
}

// NewMockmessageProducer creates a new mock instance.
func NewMockmessageProducer(ctrl *gomock.Controller) *MockmessageProducer {
	mock := &MockmessageProducer{ctrl: ctrl}
	mock.recorder = &MockmessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageProducer) EXPECT() *MockmessageProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockmessageProducer) ProduceMessage(ctx context.Context, message msgproducer.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockmessageProducerMockRecorder) ProduceMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockmessageProducer)(nil).ProduceMessage), ctx, message)
}

// MockmessageRepository is a mock of messageRepository interface.
type MockmessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepositoryMockRecorder
}

// MockmessageRepositoryMockRecorder is the mock recorder for MockmessageRepository.
type MockmessageRepositoryMockRecorder struct {
	mock *MockmessageRepository
}

// NewMockmessageRepository creates a new mock instance.
func NewMockmessageRepository(ctrl *gomock.Controller) *MockmessageRepository {
	mock := &MockmessageRepository{ctrl: ctrl}
	mock.recorder = &MockmessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepository) EXPECT() *MockmessageRepositoryMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockmessageRepository) CreateService(ctx context.Context, problemID types.ProblemID, chatID types.ChatID, msgBody string) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, problemID, chatID, msgBody)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockmessageRepositoryMockRecorder) CreateService(ctx, problemID, chatID, msgBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockmessageRepository)(nil).CreateService), ctx, problemID, chatID, msgBody)
}

// GetFirstProblemMessage mocks base method.
func (m *MockmessageRepository) GetFirstProblemMessage(ctx context.Context, problemID types.ProblemID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstProblemMessage", ctx, problemID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstProblemMessage indicates an expected call of GetFirstProblemMessage.
func (mr *MockmessageRepositoryMockRecorder) GetFirstProblemMessage(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstProblemMessage", reflect.TypeOf((*MockmessageRepository)(nil).GetFirstProblemMessage), ctx, problemID)
}

// MockmanagerLoadService is a mock of managerLoadService interface.
type MockmanagerLoadService struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerLoadServiceMockRecorder
}

// MockmanagerLoadServiceMockRecorder is the mock recorder for MockmanagerLoadService.
type MockmanagerLoadServiceMockRecorder struct {
	mock *MockmanagerLoadService
}

// NewMockmanagerLoadService creates a new mock instance.
func NewMockmanagerLoadService(ctrl *gomock.Controller) *MockmanagerLoadService {
	mock := &MockmanagerLoadService{ctrl: ctrl}
	mock.recorder = &MockmanagerLoadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerLoadService) EXPECT() *MockmanagerLoadServiceMockRecorder {
	return m.recorder
}

// CanManagerTakeProblem mocks base method.
func (m *MockmanagerLoadService) CanManagerTakeProblem(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManagerTakeProblem", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanManagerTakeProblem indicates an expected call of CanManagerTakeProblem.
func (mr *MockmanagerLoadServiceMockRecorder) CanManagerTakeProblem(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManagerTakeProblem", reflect.TypeOf((*MockmanagerLoadService)(nil).CanManagerTakeProblem), ctx, managerID)
}
