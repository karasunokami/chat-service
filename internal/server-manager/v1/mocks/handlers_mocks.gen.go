// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package managerv1mocks is a generated GoMock package.
package managerv1mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	canreceiveproblems "github.com/karasunokami/chat-service/internal/usecases/manager/can-receive-problems"
	closechat "github.com/karasunokami/chat-service/internal/usecases/manager/close-chat"
	freehands "github.com/karasunokami/chat-service/internal/usecases/manager/free-hands"
	getchats "github.com/karasunokami/chat-service/internal/usecases/manager/get-chats"
	gethistory "github.com/karasunokami/chat-service/internal/usecases/manager/get-history"
	sendmessage "github.com/karasunokami/chat-service/internal/usecases/manager/send-message"
)

// MockcanReceiveProblemsUseCase is a mock of canReceiveProblemsUseCase interface.
type MockcanReceiveProblemsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockcanReceiveProblemsUseCaseMockRecorder
}

// MockcanReceiveProblemsUseCaseMockRecorder is the mock recorder for MockcanReceiveProblemsUseCase.
type MockcanReceiveProblemsUseCaseMockRecorder struct {
	mock *MockcanReceiveProblemsUseCase
}

// NewMockcanReceiveProblemsUseCase creates a new mock instance.
func NewMockcanReceiveProblemsUseCase(ctrl *gomock.Controller) *MockcanReceiveProblemsUseCase {
	mock := &MockcanReceiveProblemsUseCase{ctrl: ctrl}
	mock.recorder = &MockcanReceiveProblemsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcanReceiveProblemsUseCase) EXPECT() *MockcanReceiveProblemsUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockcanReceiveProblemsUseCase) Handle(ctx context.Context, req canreceiveproblems.Request) (canreceiveproblems.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(canreceiveproblems.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockcanReceiveProblemsUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockcanReceiveProblemsUseCase)(nil).Handle), ctx, req)
}

// MockfreeHandsUseCase is a mock of freeHandsUseCase interface.
type MockfreeHandsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockfreeHandsUseCaseMockRecorder
}

// MockfreeHandsUseCaseMockRecorder is the mock recorder for MockfreeHandsUseCase.
type MockfreeHandsUseCaseMockRecorder struct {
	mock *MockfreeHandsUseCase
}

// NewMockfreeHandsUseCase creates a new mock instance.
func NewMockfreeHandsUseCase(ctrl *gomock.Controller) *MockfreeHandsUseCase {
	mock := &MockfreeHandsUseCase{ctrl: ctrl}
	mock.recorder = &MockfreeHandsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfreeHandsUseCase) EXPECT() *MockfreeHandsUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockfreeHandsUseCase) Handle(ctx context.Context, req freehands.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockfreeHandsUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockfreeHandsUseCase)(nil).Handle), ctx, req)
}

// MockgetChatsUseCase is a mock of getChatsUseCase interface.
type MockgetChatsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockgetChatsUseCaseMockRecorder
}

// MockgetChatsUseCaseMockRecorder is the mock recorder for MockgetChatsUseCase.
type MockgetChatsUseCaseMockRecorder struct {
	mock *MockgetChatsUseCase
}

// NewMockgetChatsUseCase creates a new mock instance.
func NewMockgetChatsUseCase(ctrl *gomock.Controller) *MockgetChatsUseCase {
	mock := &MockgetChatsUseCase{ctrl: ctrl}
	mock.recorder = &MockgetChatsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetChatsUseCase) EXPECT() *MockgetChatsUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockgetChatsUseCase) Handle(ctx context.Context, req getchats.Request) (getchats.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(getchats.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockgetChatsUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockgetChatsUseCase)(nil).Handle), ctx, req)
}

// MockgetHistoryUseCase is a mock of getHistoryUseCase interface.
type MockgetHistoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockgetHistoryUseCaseMockRecorder
}

// MockgetHistoryUseCaseMockRecorder is the mock recorder for MockgetHistoryUseCase.
type MockgetHistoryUseCaseMockRecorder struct {
	mock *MockgetHistoryUseCase
}

// NewMockgetHistoryUseCase creates a new mock instance.
func NewMockgetHistoryUseCase(ctrl *gomock.Controller) *MockgetHistoryUseCase {
	mock := &MockgetHistoryUseCase{ctrl: ctrl}
	mock.recorder = &MockgetHistoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetHistoryUseCase) EXPECT() *MockgetHistoryUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockgetHistoryUseCase) Handle(ctx context.Context, req gethistory.Request) (gethistory.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(gethistory.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockgetHistoryUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockgetHistoryUseCase)(nil).Handle), ctx, req)
}

// MocksendMessageUseCase is a mock of sendMessageUseCase interface.
type MocksendMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MocksendMessageUseCaseMockRecorder
}

// MocksendMessageUseCaseMockRecorder is the mock recorder for MocksendMessageUseCase.
type MocksendMessageUseCaseMockRecorder struct {
	mock *MocksendMessageUseCase
}

// NewMocksendMessageUseCase creates a new mock instance.
func NewMocksendMessageUseCase(ctrl *gomock.Controller) *MocksendMessageUseCase {
	mock := &MocksendMessageUseCase{ctrl: ctrl}
	mock.recorder = &MocksendMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksendMessageUseCase) EXPECT() *MocksendMessageUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MocksendMessageUseCase) Handle(ctx context.Context, req sendmessage.Request) (sendmessage.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(sendmessage.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MocksendMessageUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MocksendMessageUseCase)(nil).Handle), ctx, req)
}

// MockcloseChatUseCase is a mock of closeChatUseCase interface.
type MockcloseChatUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockcloseChatUseCaseMockRecorder
}

// MockcloseChatUseCaseMockRecorder is the mock recorder for MockcloseChatUseCase.
type MockcloseChatUseCaseMockRecorder struct {
	mock *MockcloseChatUseCase
}

// NewMockcloseChatUseCase creates a new mock instance.
func NewMockcloseChatUseCase(ctrl *gomock.Controller) *MockcloseChatUseCase {
	mock := &MockcloseChatUseCase{ctrl: ctrl}
	mock.recorder = &MockcloseChatUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcloseChatUseCase) EXPECT() *MockcloseChatUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockcloseChatUseCase) Handle(ctx context.Context, req closechat.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockcloseChatUseCaseMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockcloseChatUseCase)(nil).Handle), ctx, req)
}
